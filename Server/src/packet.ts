/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace runio {
    export enum MSGID {
        CMOVE = 0,
        SMOVE = 1
    }
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            name?: string;
            position?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 3) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            playerId?: number;
            name?: string;
            position?: ReturnType<typeof Position.prototype.toObject>;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                name?: string;
                position?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_position)
                writer.writeMessage(3, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            rotate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("rotate" in data && data.rotate != undefined) {
                    this.rotate = data.rotate;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get rotate() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set rotate(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            rotate?: number;
        }): Position {
            const message = new Position({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.rotate != null) {
                message.rotate = data.rotate;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                rotate?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.rotate != null) {
                data.rotate = this.rotate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (this.rotate != 0)
                writer.writeFloat(3, this.rotate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.rotate = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class CMove extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            position?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 1) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            position?: ReturnType<typeof Position.prototype.toObject>;
        }): CMove {
            const message = new CMove({});
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                position?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_position)
                writer.writeMessage(1, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CMove {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CMove();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CMove {
            return CMove.deserialize(bytes);
        }
    }
}
